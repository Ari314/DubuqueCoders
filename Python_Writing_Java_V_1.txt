"""
Automates the basic Writing of a Java Class
Author: Liam Johnston
Date: 10/13/2016
Restrictions: limit of 26 Instance Fields
Info:When you are done with instance fields enter a blank new instance ex:
to print out the basic java class
Version 2.0 
+Setters for variables
"""
import time
#Defining Variables
cn=input("\n\n\nClass Name: ")
print("\n")
global it
global int_name
it=""
int_name=""
global counter
counter=0
alphebet="ABCDEFGHIJKLMNOPQRSTUVWXYZ"
#Template is used to print the readable copied code
def Template(T1, T2, T3, U1):
    #T1 ClassName, T2 Type, T3 Name, U1 number of instance fields
    print("\n\n","-"*30,"\n\n")#Gives some elbow room
    print("public class ",T1,"{")
    print("//Instance Fields")
    
    #Seperate the different types and names
    one_sep=T2.split()
    two_sep=T3.split()
    
    backup_U1 = 0
    backup_U1 = U1
    pop = U1
    #Prints the items in the list
    for item in T2.split():
        U1 -= 1
        print("private",one_sep[U1], two_sep[U1],";")
    U1 = backup_U1 #resets U1
    #Class Constructor
    print("//Class Constructor")
    print("public",T1,"(")
    ##Parameters of Constructor
    for item in T2.split():
        U1 -= 1
        print(one_sep[U1], alphebet[U1])
        if U1 > 0:
            print(", ")
    U1 = backup_U1 #resets U1
    print(")")#End Parameters
    
    print("{")
    for item in T3.split():
        U1 -=1
        print(two_sep[U1],"=" ,alphebet[U1],";")
    U1 = backup_U1 #resets U1
    print("}")
    extra_U2=U1
    for item in T3.split():
        U1 -=1
        get= "get"+two_sep[U1].title()
        print("public",one_sep[U1], get.replace(" ",""),"(){return", two_sep[U1],";}")
    print("//Setters/n")
    #T1 ClassName, T2 Type, T3 Name, U1 number of instance fields
    for item in T2.split():
        pop -= 1
        set= " set"+two_sep[pop].title()
        helping="public void" +" "
        soup = "("+ one_sep[pop] + " " + alphebet[0] + ")" +"{"
        print(helping + set.replace(" ","")+ soup)
        print(two_sep[pop]+"="+alphebet[0]+";}")#changes appropriate varibale to the given value
        if U1 > 0:
            print(", ")
    
    print("}")#End of Line
    #T1 ClassName, T2 Type, T3 Name, U1 number of instance fields
    
#This code gets the information to use for Template()
boolean=False
while boolean==False:
    cmd=input("Instance Field Type: ")
    if cmd=="":
        boolean=True
        break
    CMD=input("Instance Field Name: ")
    it += cmd + " "
    int_name += CMD + " "
    counter = 1 + counter
    print("\n")
#it = Type
#int_name = instance name
#counter = amount of instance fields
Template(cn, it, int_name, counter)
time.sleep(60)